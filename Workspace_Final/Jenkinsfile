pipeline {
  agent {
    docker {
      image 'docker:20-dind'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    NODE_VERSION = '20-alpine'
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred-id')
    DOCKERHUB_USERNAME = 'khangdinh2103'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/khangdinh2103/Microservices_Jewelry_eCommerce_FE.git'
      }
    }

    stage('Build & Start Services') {
      steps {
        dir('Workspace_Final') {
          script {
            sh 'docker-compose build'
            sh 'docker-compose up -d'
            
            // Cài đặt curl trong container Jenkins
            sh 'apk add --no-cache curl'
            
            // Check if services are running
            sh 'docker-compose ps'
            
            // Wait a bit for services to initialize
            echo "Waiting 30 seconds for services to start..."
            sleep(time: 30, unit: 'SECONDS')
            
            // Check logs to see why services might be stopping
            sh 'docker-compose logs --tail=50'
            
            // Check again if services are running
            sh 'docker-compose ps'
          }
        }
      }
    }

    stage('Test Services') {
      steps {
        dir('Workspace_Final') {
          script {
            // Check if containers are running before testing
            def containersRunning = sh(
              script: "docker-compose ps --services --filter 'status=running' | wc -l",
              returnStdout: true
            ).trim()
            
            echo "Number of running containers: ${containersRunning}"
            
            if (containersRunning.toInteger() > 0) {
              def services = [
                [name: 'container', port: 3000],
                [name: 'service-account', port: 3001],
                [name: 'service-catalog', port: 3005],
                [name: 'service-cart-order', port: 3006]
              ]

              services.each { svc ->
                echo "Testing ${svc.name} on port ${svc.port}..."
                try {
                  // Check if the specific container is running
                  def isRunning = sh(
                    script: "docker-compose ps ${svc.name} | grep -q 'Up'",
                    returnStatus: true
                  ) == 0
                  
                  if (isRunning) {
                    // Install curl and test
                    sh "docker-compose exec -T ${svc.name} sh -c 'apk add --no-cache curl && curl -s -o /dev/null -w \"%{http_code}\" http://localhost:${svc.port} || echo \"000\"'"
                    echo "Service '${svc.name}' was tested"
                  } else {
                    echo "Service '${svc.name}' is not running, skipping test"
                  }
                } catch (Exception e) {
                  echo "Warning: Could not test service '${svc.name}': ${e.message}, but continuing pipeline"
                }
              }
            } else {
              echo "No containers are running, skipping tests"
            }
          }
        }
      }
    }

    stage('Push Docker Images') {
      steps {
        dir('Workspace_Final') {
          script {
            def serviceName = 'service-account'
            
            // Check if the service is running
            def isRunning = sh(
              script: "docker-compose ps ${serviceName} | grep -q 'Up'",
              returnStatus: true
            ) == 0
            
            if (isRunning) {
              def containerId = sh(
                script: "docker-compose ps -q ${serviceName}",
                returnStdout: true
              ).trim()
              
              def imageName = "${DOCKERHUB_USERNAME}/${serviceName}"
              
              // Commit the running container to an image
              sh "docker commit ${containerId} ${imageName}:latest || true"
              
              // Push the image to Docker Hub
              withCredentials([string(credentialsId: 'dockerhub-cred-id', variable: 'DOCKER_PWD')]) {
                sh """
                  echo "Login to Docker Hub"
                  echo "${DOCKER_PWD}" | docker login -u ${DOCKERHUB_USERNAME} --password-stdin || true
                  docker push ${imageName}:latest || true
                  docker logout || true
                """
              }
            } else {
              echo "Service ${serviceName} is not running, cannot create image"
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleanup: stop and remove containers'
      dir('Workspace_Final') {
        sh 'docker-compose down || true'
      }
    }
  }
}
