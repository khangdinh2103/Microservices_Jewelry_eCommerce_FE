pipeline {
  agent {
    docker {
      image 'docker:20-dind'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    NODE_VERSION = '20-alpine'
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred-id')
    DOCKERHUB_USERNAME = 'khangdinh2103'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/khangdinh2103/Microservices_Jewelry_eCommerce_FE.git'
      }
    }

    stage('Build & Start Services') {
      steps {
        dir('Workspace_Final') {
          script {
            sh 'docker-compose build'
            sh 'docker-compose up -d'
            
            // Cài đặt curl trong container Jenkins
            sh 'apk add --no-cache curl'
            
            // Đợi cho các service sẵn sàng với timeout
            def services = [
              [name: 'container', port: 3000],
              [name: 'service-account', port: 3001],
              [name: 'service-catalog', port: 3005],
              [name: 'service-cart-order', port: 3006]
            ]
            
            services.each { svc ->
              echo "Waiting for ${svc.name} on port ${svc.port}..."
              timeout(time: 5, unit: 'MINUTES') {
                waitUntil {
                  script {
                    def result = sh(
                      script: "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:${svc.port} || echo 000", 
                      returnStdout: true
                    ).trim()
                    
                    if (result != '000' && result != '') {
                      echo "${svc.name} is ready with status ${result}"
                      return true
                    }
                    
                    echo "Still waiting for ${svc.name}..."
                    sleep 5 // Đợi 5 giây trước khi thử lại
                    return false
                  }
                }
              }
            }
          }
        }
      }
    }

    stage('Test Services') {
      steps {
        dir('Workspace_Final') {
          script {
            def services = [
              [name: 'container', port: 3000],
              [name: 'service-account', port: 3001],
              [name: 'service-catalog', port: 3005],
              [name: 'service-cart-order', port: 3006]
            ]

            services.each { svc ->
              echo "Testing ${svc.name} on port ${svc.port}..."
              try {
                // Cài đặt curl trước
                sh "docker-compose exec -T ${svc.name} sh -c 'apk add --no-cache curl'"
                
                // Sau đó kiểm tra service
                def result = sh(
                  script: "docker-compose exec -T ${svc.name} sh -c 'curl -s -o /dev/null -w \"%{http_code}\" http://localhost:${svc.port} || echo \"000\"'",
                  returnStdout: true
                ).trim()

                if (result == '000') {
                  echo "Warning: Service '${svc.name}' returned connection error on port ${svc.port}, but continuing pipeline"
                } else {
                  echo "Service '${svc.name}' is UP on port ${svc.port} with status ${result}"
                }
              } catch (Exception e) {
                echo "Warning: Could not test service '${svc.name}': ${e.message}, but continuing pipeline"
              }
            }
          }
        }
      }
    }

    stage('Build & Push Docker Images') {
      steps {
        script {
          def serviceName = 'service-account'
          def imageName = "${DOCKERHUB_USERNAME}/${serviceName}"

          sh """
            docker build -t ${imageName}:latest ./Service_Account/service-account-vite
            echo "Login to Docker Hub"
            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${imageName}:latest
            docker logout
          """
        }
      }
    }
  }

  post {
    always {
      echo 'Cleanup: stop and remove containers'
      dir('Workspace_Final') {
        sh 'docker-compose down || true'
      }
    }
  }
}
