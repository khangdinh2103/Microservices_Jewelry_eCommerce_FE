pipeline {
  agent {
    docker {
      image 'docker:20-dind'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    NODE_VERSION = '20-alpine'
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred-id')
    DOCKERHUB_USERNAME = 'khangdinh2103'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/khangdinh2103/Microservices_Jewelry_eCommerce_FE.git'
      }
    }

    stage('Build & Start Services') {
      steps {
        dir('Workspace_Final') {
          script {
            sh 'docker-compose build'
            sh 'docker-compose up -d'
          }
        }
        // Đợi service khởi động
        sleep 30
      }
    }

    stage('Test Services') {
      steps {
        dir('Workspace_Final') {
          script {
            def services = [
              [name: 'container', port: 3000],
              [name: 'service-account', port: 3001],
              [name: 'service-catalog', port: 3005],
              [name: 'service-cart-order', port: 3006]
            ]

            services.each { svc ->
              echo "Testing ${svc.name} on port ${svc.port}..."
              // Use curl instead of nc to test if the service is responding
              def result = sh(
                script: "docker-compose exec -T ${svc.name} sh -c 'wget -q --spider http://localhost:${svc.port} || echo \"Failed\"'",
                returnStatus: true
              )
              if (result != 0) {
                error "Service '${svc.name}' not responding on port ${svc.port}"
              } else {
                echo "Service '${svc.name}' is UP on port ${svc.port}"
              }
            }
          }
        }
      }
    }

    stage('Build & Push Docker Images') {
      steps {
        script {
          def serviceName = 'service-account'
          def imageName = "${DOCKERHUB_USERNAME}/${serviceName}"

          sh """
            docker build -t ${imageName}:latest ./Service_Account/service-account-vite
            echo "Login to Docker Hub"
            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ${imageName}:latest
            docker logout
          """
        }
      }
    }
  }

  post {
    always {
      echo 'Cleanup: stop and remove containers'
      dir('Workspace_Final') {
        sh 'docker-compose down'
      }
    }
  }
}
