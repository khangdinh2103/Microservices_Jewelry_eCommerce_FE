pipeline {
  agent {
    docker {
      image 'docker:20-dind'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    NODE_VERSION = '20-alpine'
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred-id')
    DOCKERHUB_USERNAME = 'khangdinh2103'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/khangdinh2103/Microservices_Jewelry_eCommerce_FE.git'
      }
    }

    stage('Setup Environment') {
      steps {
        sh 'apk add --no-cache curl'
      }
    }

    stage('Prepare Directories') {
      steps {
        dir('Workspace_Final') {
          script {
            // Create necessary directories if they don't exist
            sh '''
              mkdir -p Container/container-vite
              mkdir -p Service_Account/service-account-vite
              mkdir -p Service_Catalog/service-catalog-vite
              mkdir -p Service_Cart_Order/service-cart-order-vite
            '''
            
            // Create package.json for Container service
            sh '''
cat > Container/container-vite/package.json << 'EOF'
{
    "name": "container-vite",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "o": "concurrently \\"vite build --watch\\" \\"vite preview\\""
    },
    "dependencies": {
        "@originjs/vite-plugin-federation": "^1.4.1",
        "@tailwindcss/vite": "^4.1.6",
        "axios": "^1.9.0",
        "concurrently": "^9.1.2",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-responsive-carousel": "^3.2.23",
        "react-router-dom": "^7.6.0",
        "tailwindcss": "^4.1.6"
    },
    "devDependencies": {
        "@eslint/js": "^9.25.0",
        "@types/react": "^19.1.2",
        "@types/react-dom": "^19.1.2",
        "@vitejs/plugin-react": "^4.4.1",
        "eslint": "^9.25.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "vite": "^6.3.5"
    }
}
EOF
            '''
            
            // Create package.json for Service_Account service
            sh '''
cat > Service_Account/service-account-vite/package.json << 'EOF'
{
    "name": "service-account-vite",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "o": "concurrently \\"vite build --watch\\" \\"vite preview\\""
    },
    "dependencies": {
        "@originjs/vite-plugin-federation": "^1.4.1",
        "@tailwindcss/vite": "^4.1.6",
        "axios": "^1.9.0",
        "concurrently": "^9.1.2",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^7.6.0",
        "tailwindcss": "^4.1.6"
    },
    "devDependencies": {
        "@eslint/js": "^9.25.0",
        "@types/react": "^19.1.2",
        "@types/react-dom": "^19.1.2",
        "@vitejs/plugin-react": "^4.4.1",
        "eslint": "^9.25.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "vite": "^6.3.5"
    }
}
EOF
            '''
            
            // Create package.json for Service_Catalog service
            sh '''
cat > Service_Catalog/service-catalog-vite/package.json << 'EOF'
{
    "name": "service-catalog-vite",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "o": "concurrently \\"vite build --watch\\" \\"vite preview\\""
    },
    "dependencies": {
        "@originjs/vite-plugin-federation": "^1.4.1",
        "@tailwindcss/vite": "^4.1.6",
        "axios": "^1.9.0",
        "concurrently": "^9.1.2",
        "framer-motion": "^12.12.1",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^7.6.0",
        "tailwindcss": "^4.1.6"
    },
    "devDependencies": {
        "@eslint/js": "^9.25.0",
        "@types/react": "^19.1.2",
        "@types/react-dom": "^19.1.2",
        "@vitejs/plugin-react": "^4.4.1",
        "eslint": "^9.25.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "vite": "^6.3.5"
    }
}
EOF
            '''
            
            // Create package.json for Service_Cart_Order service
            sh '''
cat > Service_Cart_Order/service-cart-order-vite/package.json << 'EOF'
{
    "name": "service-cart-order-vite",
    "private": true,
    "version": "0.0.0",
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "lint": "eslint .",
        "preview": "vite preview",
        "o": "concurrently \\"vite build --watch\\" \\"vite preview\\""
    },
    "dependencies": {
        "@originjs/vite-plugin-federation": "^1.4.1",
        "@tailwindcss/vite": "^4.1.7",
        "axios": "^1.9.0",
        "concurrently": "^9.1.2",
        "framer-motion": "^12.12.1",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "react-router-dom": "^7.6.0",
        "tailwindcss": "^4.1.7"
    },
    "devDependencies": {
        "@eslint/js": "^9.25.0",
        "@types/react": "^19.1.2",
        "@types/react-dom": "^19.1.2",
        "@vitejs/plugin-react": "^4.4.1",
        "eslint": "^9.25.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "vite": "^6.3.5"
    }
}
EOF
            '''
          }
        }
      }
    }

    stage('Build & Start Services') {
      steps {
        dir('Workspace_Final') {
          script {
            sh 'docker-compose build'
            sh 'docker-compose up -d'
            
            // Check if services are running
            sh 'docker-compose ps'
            
            // Wait for services to initialize
            echo "Waiting for services to start..."
            sleep(time: 60, unit: 'SECONDS')
            
            // Check logs
            sh 'docker-compose logs --tail=50'
            
            // Check again if services are running
            sh 'docker-compose ps'
          }
        }
      }
    }

    stage('Create and Push Docker Images') {
      steps {
        dir('Workspace_Final') {
          script {
            def services = ['container', 'service-account', 'service-catalog', 'service-cart-order']
            
            services.each { serviceName ->
              echo "Processing ${serviceName}..."
              
              // Check if the service container exists
              def containerExists = sh(
                script: "docker-compose ps -q ${serviceName} || echo ''",
                returnStdout: true
              ).trim()
              
              if (containerExists) {
                def imageName = "${DOCKERHUB_USERNAME}/${serviceName}"
                
                // Commit the container to an image
                sh "docker commit ${containerExists} ${imageName}:latest || echo 'Failed to commit container'"
                
                // Push the image to Docker Hub
                withCredentials([string(credentialsId: 'dockerhub-cred-id', variable: 'DOCKER_PWD')]) {
                  sh """
                    echo "Login to Docker Hub"
                    echo "${DOCKER_PWD}" | docker login -u ${DOCKERHUB_USERNAME} --password-stdin || echo 'Failed to login'
                    docker push ${imageName}:latest || echo 'Failed to push image'
                  """
                }
                
                echo "Successfully processed ${serviceName}"
              } else {
                echo "Container for ${serviceName} not found, skipping"
              }
            }
            
            // Logout from Docker Hub
            sh "docker logout || echo 'Failed to logout'"
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Cleanup: stopping and removing containers'
      dir('Workspace_Final') {
        sh 'docker-compose down || echo "Failed to bring down containers"'
      }
    }
    success {
      echo 'Pipeline completed successfully!'
    }
    failure {
      echo 'Pipeline failed. Check the logs for details.'
    }
  }
}