pipeline {
  agent {
    docker {
      image 'docker:20-dind'
      args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    NODE_VERSION = '20-alpine'
    DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred-id')
    DOCKERHUB_USERNAME = 'khangdinh2103'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/khangdinh2103/Microservices_Jewelry_eCommerce_FE.git'
      }
    }

    stage('Setup Environment') {
      steps {
        sh 'apk add --no-cache curl git'
      }
    }

    stage('Verify Repository Content') {
      steps {
        script {
          echo "Checking repository content..."
          sh 'ls -la'
          
          // Check if Workspace_Final directory exists
          sh 'if [ -d "Workspace_Final" ]; then echo "Workspace_Final directory exists"; else echo "Workspace_Final directory does not exist"; fi'
          
          // Check key files and directories
          sh '''
            echo "Checking key files and directories..."
            if [ -f "Workspace_Final/docker-compose.yml" ]; then echo "docker-compose.yml exists"; else echo "docker-compose.yml does not exist"; fi
            
            # Check service directories
            if [ -d "Workspace_Final/Container" ]; then echo "Container directory exists"; else echo "Container directory does not exist"; fi
            if [ -d "Workspace_Final/Service_Account" ]; then echo "Service_Account directory exists"; else echo "Service_Account directory does not exist"; fi
            if [ -d "Workspace_Final/Service_Catalog" ]; then echo "Service_Catalog directory exists"; else echo "Service_Catalog directory does not exist"; fi
            if [ -d "Workspace_Final/Service_Cart_Order" ]; then echo "Service_Cart_Order directory exists"; else echo "Service_Cart_Order directory does not exist"; fi
            
            # Count total files in repository
            echo "Total files in repository:"
            find . -type f | wc -l
          '''
        }
      }
    }

    // stage('Prepare Directories') {
    //   steps {
    //     dir('Workspace_Final') {
    //       script {
    //         // Create necessary directories if they don't exist
    //         sh '''
    //           mkdir -p Container/container-vite
    //           mkdir -p Service_Account/service-account-vite
    //           mkdir -p Service_Catalog/service-catalog-vite
    //           mkdir -p Service_Cart_Order/service-cart-order-vite
    //         '''
    //         // No package.json creation as requested
    //       }
    //     }
    //   }
    // }

    stage('Build & Start Services') {
      steps {
        dir('Workspace_Final') {
          script {
            sh 'docker-compose build'
            sh 'docker-compose up -d'
            
            // Check if services are running
            sh 'docker-compose ps'
            
            // Wait for services to initialize
            echo "Waiting for services to start..."
            sleep(time: 60, unit: 'SECONDS')
            
            // Check logs
            sh 'docker-compose logs --tail=50'
            
            // Check again if services are running
            sh 'docker-compose ps'
          }
        }
      }
    }

    stage('Create and Push Docker Images') {
      steps {
        dir('Workspace_Final') {
          script {
            def services = ['container', 'service-account', 'service-catalog', 'service-cart-order']
            
            services.each { serviceName ->
              echo "Processing ${serviceName}..."
              
              // Check if the service container exists
              def containerExists = sh(
                script: "docker-compose ps -q ${serviceName} || echo ''",
                returnStdout: true
              ).trim()
              
              if (containerExists) {
                def imageName = "${DOCKERHUB_USERNAME}/${serviceName}"
                
                // Commit the container to an image
                sh "docker commit ${containerExists} ${imageName}:latest || echo 'Failed to commit container'"
                
                // Push the image to Docker Hub - FIXED CREDENTIALS USAGE
                sh """
                  echo "Login to Docker Hub"
                  echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u ${DOCKERHUB_USERNAME} --password-stdin || echo 'Failed to login'
                  
                  # Create repository if it doesn't exist (this is a no-op if it exists)
                  docker tag ${imageName}:latest ${imageName}:latest
                  
                  # Try to push with better error handling
                  if docker push ${imageName}:latest; then
                    echo "Successfully pushed ${imageName}:latest"
                  else
                    echo "Failed to push image. Creating repository first..."
                    # You may need to create the repository manually on Docker Hub
                    echo "Please ensure repository ${imageName} exists on Docker Hub"
                  fi
                """
                
                echo "Successfully processed ${serviceName}"
              } else {
                echo "Container for ${serviceName} not found, skipping"
              }
            }
            
            // Logout from Docker Hub
            sh "docker logout || echo 'Failed to logout'"
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline completed - keeping containers running'
      // Removed the docker-compose down command to keep containers running
    }
    success {
      echo 'Pipeline completed successfully!'
    }
    failure {
      echo 'Pipeline failed. Check the logs for details.'
    }
  }
}